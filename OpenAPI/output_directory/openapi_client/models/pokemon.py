# coding: utf-8

"""
    Pokedex API

    API for håndtering af Pokémon data ved brug af en Pandas DataFrame.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Pokemon(BaseModel):
    """
    Pokemon
    """ # noqa: E501
    image: Optional[StrictStr] = Field(default=None, alias="Image")
    index: Optional[StrictInt] = Field(default=None, alias="Index")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    type_1: Optional[StrictStr] = Field(default=None, alias="Type 1")
    type_2: Optional[StrictStr] = Field(default=None, alias="Type 2")
    total: Optional[StrictInt] = Field(default=None, alias="Total")
    hp: Optional[StrictInt] = Field(default=None, alias="HP")
    attack: Optional[StrictInt] = Field(default=None, alias="Attack")
    defense: Optional[StrictInt] = Field(default=None, alias="Defense")
    sp__atk: Optional[StrictInt] = Field(default=None, alias="SP. Atk")
    sp__def: Optional[StrictInt] = Field(default=None, alias="SP. Def")
    speed: Optional[StrictInt] = Field(default=None, alias="Speed")
    __properties: ClassVar[List[str]] = ["Image", "Index", "Name", "Type 1", "Type 2", "Total", "HP", "Attack", "Defense", "SP. Atk", "SP. Def", "Speed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pokemon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pokemon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Image": obj.get("Image"),
            "Index": obj.get("Index"),
            "Name": obj.get("Name"),
            "Type 1": obj.get("Type 1"),
            "Type 2": obj.get("Type 2"),
            "Total": obj.get("Total"),
            "HP": obj.get("HP"),
            "Attack": obj.get("Attack"),
            "Defense": obj.get("Defense"),
            "SP. Atk": obj.get("SP. Atk"),
            "SP. Def": obj.get("SP. Def"),
            "Speed": obj.get("Speed")
        })
        return _obj


